service: task-api

provider:
  name: aws
  region: ${opt:region, 'eu-central-1'}
  stage: ${opt:stage, 'dev'}
  timeout: 30
  memorySize: 512
  environment:
    NODE_ENV: ${self:provider.stage}
    DB_ARN: ${self:custom.dbArn.${self:provider.stage}}
    SECRET_ARN: ${self:custom.secretArn.${self:provider.stage}}
    DB_NAME: ${self:custom.dbName.${self:provider.stage}}
    AWS_REGION: ${self:provider.region}
  ecr:
    images:
      appimage:
        path: ./
  iamRoleStatements:
    - Effect: Allow
      Action:
        - rds-data:ExecuteStatement
        - rds-data:BatchExecuteStatement
      Resource: ${self:custom.dbArn.${self:provider.stage}}
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: ${self:custom.secretArn.${self:provider.stage}}
  logs:
    restApi:
      accessLogging: true
      executionLogging: true
      level: INFO
      fullExecutionData: true

custom:
  dbArn:
    dev: arn:aws:rds:${self:provider.region}:${aws:accountId}:cluster:dev-db-cluster
    staging: arn:aws:rds:${self:provider.region}:${aws:accountId}:cluster:staging-db-cluster
    prod: arn:aws:rds:${self:provider.region}:${aws:accountId}:cluster:prod-db-cluster
  secretArn:
    dev: arn:aws:secretsmanager:${self:provider.region}:${aws:accountId}:secret:dev/db-credentials
    staging: arn:aws:secretsmanager:${self:provider.region}:${aws:accountId}:secret:staging/db-credentials
    prod: arn:aws:secretsmanager:${self:provider.region}:${aws:accountId}:secret:prod/db-credentials
  dbName:
    dev: dev_database
    staging: staging_database
    prod: prod_database
  vpc:
    dev: vpc-dev-id
    staging: vpc-staging-id
    prod: vpc-prod-id

functions:
  api:
    image:
      name: appimage
      command: [dist/src/lambda.lambdaHandler]
    events:
      - http:
          path: /{proxy+}
          method: any
          cors: true
    timeout: 30
    memorySize: 512
    vpc:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
      subnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
    environment:
      NODE_OPTIONS: --enable-source-maps

resources:
  Resources:
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Lambda function
        VpcId: ${self:custom.vpc.${self:provider.stage}}
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: 0.0.0.0/0

    CloudWatchLogsPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: ${self:service}-${self:provider.stage}-cloudwatch-logs-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "arn:aws:logs:${self:provider.region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${self:provider.stage}-*"
        Roles:
          - Ref: IamRoleLambdaExecution

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-ecr-plugin
