name: Deploy Containerized Service
on:
  push:
    branches:
      - main
      - staging
      - dev

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Determine deployment stage
        id: stage
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "STAGE=prod" >> $GITHUB_ENV
            echo "stage=prod" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            echo "STAGE=staging" >> $GITHUB_ENV
            echo "stage=staging" >> $GITHUB_OUTPUT
          else
            echo "STAGE=dev" >> $GITHUB_ENV
            echo "stage=dev" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test

      - name: Build and bundle application
        run: npm run build

      - name: Build and push Docker image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: task-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.STAGE }}-latest .
          
          # Push Docker image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.STAGE }}-latest
          
          # Set image URI for Serverless deployment
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Install Serverless Framework
        run: npm install -g serverless@3.34.0

      - name: Deploy with Serverless Framework
        run: |
          serverless deploy --stage ${{ env.STAGE }} --verbose
        env:
          NODE_ENV: ${{ env.STAGE }}
          # These environment variables are only used during deployment, not for runtime
          SERVERLESS_DEPLOYMENT_BUCKET: ${{ secrets.SERVERLESS_DEPLOYMENT_BUCKET }}

      - name: Verify deployment
        run: |
          echo "Deployed to ${{ env.STAGE }} environment"
          echo "API URL: https://<api-id>.execute-api.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.STAGE }}/"

