name: Build and Deploy

on:
  workflow_call:

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy with Terraform
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Set the plan variables with explicit values, not relying on string processing
          echo "Docker image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "DB name: ${{ secrets.DB_NAME }}"

          # For numeric values, ensure they're numbers or use defaults
          ALLOCATED_STORAGE="${{ secrets.ALLOCATED_STORAGE }}"
          if [[ ! "$ALLOCATED_STORAGE" =~ ^[0-9]+$ ]]; then
            ALLOCATED_STORAGE=20
          fi

          MAX_ALLOCATED_STORAGE="${{ secrets.MAX_ALLOCATED_STORAGE }}"
          if [[ ! "$MAX_ALLOCATED_STORAGE" =~ ^[0-9]+$ ]]; then
            MAX_ALLOCATED_STORAGE=100
          fi

          # For boolean, ensure it's true or false
          MULTI_AZ="${{ secrets.MULTI_AZ }}"
          if [[ "$MULTI_AZ" == "true" ]]; then
            MULTI_AZ="true"
          else
            MULTI_AZ="false"
          fi

          terraform plan \
          -var="docker_image=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" \
          -var="db_name=${{ secrets.DB_NAME }}" \
          -var="aws_region=${{ secrets.AWS_REGION }}" \
          -var="db_instance_class=${{ secrets.DB_INSTANCE_CLASS }}" \
          -var="allocated_storage=${ALLOCATED_STORAGE}" \
          -var="max_allocated_storage=${MAX_ALLOCATED_STORAGE}" \
          -var="multi_az=${MULTI_AZ}" \
          -out=tfplan
        working-directory: ./terraform
